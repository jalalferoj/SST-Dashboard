Create a one-page HTML dashboard and a web app with html css and java script that allows you to upload any files and dynamically visualize the following key metrics:
Dashboard Features to Include:
1.	Open & Monthly Closed Status â€“ Summary cards
2.	Open Average Ticket Duration â€“ Bar chart
3.	Month-to-Date Closed Ticket Comparison â€“ Horizontal bar chart
4.	Average Monthly Survey Results â€“ Table
5.	Open Service Calls â€“ Breached 2x â€“ Pie chart
6.	Open Tickets by SST Location â€“ Bar chart
7.	Closed Service Call Deadline â€“ Pie chart
8.	Closed Tickets by SST Location â€“ Bar chart
9.	Open Tickets â€“ Extended 3x â€“ Pie chart
10.	Open SC by Requestor Location â€“ Bar chart
11.	Monthly Closed Tickets by Ticket Type â€“ Multi-month bar chart
Use:
â€¢	HTML + CSS (Bootstrap for styling)
â€¢	JavaScript (Chart.js for charts, PapaParse for CSV parsing)
________________________________________
âœ… Columns in Your File:
â€¢	Registered, Item type, ID, Description, Priority
â€¢	Modified, Deadline, Status (Service Today)
â€¢	To workgroup, Requestor Site, Requestor
â€¢	Revised_Deadline, To person, Modified by
â€¢	From person, Entered by person
â€¢	Requestor Building/Room, Requestor E-mail
â€¢	Template, Requestor Division
ðŸ§  Next Step:
Iâ€™ll now generate a modern one-page HTML dashboard that:
â€¢	Lets you upload Excel/CSV files
â€¢	Automatically parses and visualizes key metrics like: 
o	Ticket status (open/closed)
o	Ticket types and priorities
o	Locations and requestors
o	Breach and extension stats
o	Survey results (if available)
Youâ€™ll be able to open this HTML file in any browser and interact with your data.
Your enhanced dark-mode dashboard is ready! 
Features Add:
â€¢	Theme Toggle Button: Switch between dark and light modes instantly.
â€¢	Reset Button: Clears all charts and file input for a fresh start.
â€¢	Supports all file formats.
1.	Filters for:
o	Date range
o	Priority
o	Status
2.	Export Charts:
o	Save as PNG or PDF
3.	Summary Statistics:
o	Average resolution time
o	Breach rate
o	Ticket volume trends
4.	Interactive Map:
o	Visualize ticket locations geographically
5.	Drill-down Views:
o	Click on chart elements to see detailed ticket data
6.	User Authentication:
o	Secure access for different roles (admin, viewer, etc.)
7.	Live Data Integration:
â€¢	Connect to APIs or databases for real-time updates
Supports .xlsx, .csv, and .txt file uploads
â€¢	New Charts: 
o	Deadline breaches
o	Average ticket durations
o	Open service call breached
o	Weekly & monthly closed status
o	Closed tickets by location
o	Open ticket extended
o	Ticket nature by description
â€¢	Dark Mode styling with Bootstrap 5
o	
________________________________________
â€¢  Integrate these charts into a single interactive HTML dashboard? 
â€¢  Add filter controls and export buttons
Package this into a web app (e.g., Flask or Streamlit) for easier deployment


To Run the Dashboard:
1.	Make sure you have Python installed.
2.	Install required packages: 
3.	Place the dashboard_app.py file in the same directory as your dashboard_assets folder.
4.	Run the app: 
5.	Open your browser and go to http://localhost:8050



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Service Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/papaparse@5.3.1/papaparse.min.js"></script>
    <style>
        body { padding: 20px; background-color: #f8f9fa; }
        .chart-container { margin-top: 30px; }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-center mb-4">Service Dashboard</h1>
        <div class="mb-3">
            <label for="fileInput" class="form-label">Upload CSV File</label>
            <input class="form-control" type="file" id="fileInput" accept=".csv">
        </div>

        <div class="row chart-container">
            <div class="col-md-6">
                <canvas id="statusChart"></canvas>
            </div>
            <div class="col-md-6">
                <canvas id="priorityChart"></canvas>
            </div>
        </div>

        <div class="row chart-container">
            <div class="col-md-6">
                <canvas id="typeChart"></canvas>
            </div>
            <div class="col-md-6">
                <canvas id="siteChart"></canvas>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('fileInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) return;

            Papa.parse(file, {
                header: true,
                skipEmptyLines: true,
                complete: function(results) {
                    const data = results.data;
                    const statusCounts = {};
                    const priorityCounts = {};
                    const typeCounts = {};
                    const siteCounts = {};

                    data.forEach(row => {
                        statusCounts[row['Status (Service Today)']] = (statusCounts[row['Status (Service Today)']] || 0) + 1;
                        priorityCounts[row['Priority']] = (priorityCounts[row['Priority']] || 0) + 1;
                        typeCounts[row['Item type']] = (typeCounts[row['Item type']] || 0) + 1;
                        siteCounts[row['Requestor Site  ']] = (siteCounts[row['Requestor Site  ']] || 0) + 1;
                    });

                    renderChart('statusChart', 'Ticket Status', statusCounts);
                    renderChart('priorityChart', 'Priority Distribution', priorityCounts);
                    renderChart('typeChart', 'Item Type Distribution', typeCounts);
                    renderChart('siteChart', 'Requestor Site Distribution', siteCounts);
                }
            });
        });

        function renderChart(canvasId, label, dataObj) {
            const ctx = document.getElementById(canvasId).getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(dataObj),
                    datasets: [{
                        label: label,
                        data: Object.values(dataObj),
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        title: { display: true, text: label }
                    }
                }
            });
        }
    </script>
</body>
</html>
app.py

from dash import Dash, html, dcc, Input, Output, State
import plotly.io as pio
import os

app = Dash(__name__)

charts = [
    "open_avg_duration",
    "monthly_closed_comparison",
    "open_service_breach",
    "open_by_sst",
    "closed_service_breach",
    "closed_by_sst",
    "open_extended",
    "open_sc_by_requestor",
    "monthly_closed_by_type"
]

app.layout = html.Div([
    html.H1("Service Ticket Dashboard"),
    html.Div([
        html.H2("Visualizations"),
        *[html.Div([
            html.H4(chart.replace("_", " ").title()),
            dcc.Graph(id=f"graph-{chart}")
        ]) for chart in charts]
    ])
])

for chart in charts:
    @app.callback(
        Output(f"graph-{chart}", "figure"),
        Input(f"graph-{chart}", "id")
    )
    def update_graph(chart_id, chart=chart):
        try:
            fig = pio.read_json(f"dashboard_assets/{chart}.json")
            return fig
        except Exception:
            return {
                "data": [],
                "layout": {"title": f"{chart.replace('_', ' ').title()} - No Data Available"}
            }

if __name__ == '__main__':
    app.run_server(debug=True, port=8050)






